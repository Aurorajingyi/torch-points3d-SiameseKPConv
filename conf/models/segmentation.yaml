models:
    # This part describes a template model configuration
    TemplateModel:
        name: TemplateModel
        down_conv:
            module_name: TemplateModelDownConv
            ratios: []
            radius: []
            down_conv_nn: [[], [], ...]
        up_conv:
            module_name: TemplateModelUpConv
            ratios: []
            radius: []
            up_conv_nn: [[], [], ...]   
            up_k: []  
            skip: True
        innermost:
            module_name: InnerModule
            aggr: max
            nn: []
        mlp_cls: 
            nn: []
            dropout: 0.5

    # RandLA-Net: Efficient Semantic Segmentation of Large-Scale Point Clouds (https://arxiv.org/pdf/1911.11236.pdf)
    RandLANet:
        name: ranldanet_res
        down_conv:
            module_name: RandLANetRes
            ratio: [[1, 1], [0.5, 0.5]]
            indim: [3, 32]
            outdim: [32, 128]
            point_pos_nn: [[[10, 8, 3], [10, 16, 16]], [[10, 16, 32], [10, 32, 64]]]
            attention_nn: [[[11, 16, 11], [32, 64, 32]], [[64, 128, 64], [128, 256, 128]]]
            down_conv_nn: [[[11, 16, 16], [32, 64, 32]], [[64, 64, 64], [128, 128, 128]]]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [131, 128]
        up_conv:
            module_name: FPModule
            up_conv_nn: [[256, 128], [160, 64], [67, 64]]
            up_k: [1, 1, 1]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    # Relation-Shape Convolutional Neural Network for Point Cloud Analysis (https://arxiv.org/abs/1904.07601)
    RSConv:
        name: RSConv
        down_conv:
            module_name: RSConv
            ratios: [0.2, 0.25]
            radius: [0.1, 0.2]
            local_nn: [[10, 32, 16, 3], [10, 32, 64, 64]]
            down_conv_nn: [[3, 16, 32, 64], [64, 64, 128]]
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [131, 128] #[3  + 128]
        up_conv:
            module_name: FPModule
            ratios: [1, 0.25, 0.2]
            radius: [0.2, 0.2, 0.1]
            up_conv_nn: [[256, 64], [128, 64], [64, 64]] #[128 + 128, ...], [64+64, ...]
            up_k: [1, 3, 3]
            skip: True
        mlp_cls:
            nn: [64, 64, 64, 64]
            dropout: 0.5

    # KPConv: Flexible and Deformable Convolution for Point Clouds (https://arxiv.org/abs/1904.08889)
    KPConv:
        name: KPConv
        down_conv:
            module_name: LightDeformableKPConv
            ratios: [0.2, 0.25]
            radius: [0.1, 0.2]
            down_conv_nn: [[3, 32], [32, 64]]
        up_conv:
            module_name: FPModule
            up_conv_nn: [[192, 64], [96, 64], [64, 64]]     
            up_k: [1, 3, 3]   
            skip: True    
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [67, 128]
        mlp_cls: 
            nn: [64, 64, 64, 64, 64]
            dropout: 0.5

    # PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space (https://arxiv.org/abs/1706.02413)
    pointnet2:
        name: pointnet2
        down_conv:
            module_name: SAModule
            ratios: [0.2, 0.25]
            radius: [0.2, 0.4]
            down_conv_nn: [[3, 64, 64, 128], [131, 128, 128, 256]]
        up_conv:
            module_name: FPModule
            ratios: [1, 0.25, 0.2]
            radius: [1, 0.2, 0.1]
            up_conv_nn: [[1280, 256, 256], [384, 256, 128], [128, 128, 128, 128]]
            up_k: [1, 3, 3]   
            skip: True    
        innermost:
            module_name: GlobalBaseModule
            aggr: max
            nn: [259, 256, 512, 1024]
        mlp_cls: 
            nn: [128, 128, 128, 128, 128]
            dropout: 0.5